{"ast":null,"code":"import * as signalR from '@aspnet/signalr';\nimport * as i0 from \"@angular/core\";\nexport class SignalRService {\n  constructor() {\n    this.data = [];\n    this.startConnection = () => {\n      this.hubConnection = new signalR.HubConnectionBuilder().withUrl('https://localhost:5001/chart').build();\n      this.hubConnection.start().then(() => console.log('Connection established...')).catch(err => console.log('Error while starting the connection.'));\n    };\n    this.addTransferChartDataListener = () => {\n      this.hubConnection.on('transferchartdata', data => {\n        this.data = data;\n        console.log('DATA RECEIVED: ', data);\n      });\n    };\n  }\n}\nSignalRService.ɵfac = function SignalRService_Factory(t) {\n  return new (t || SignalRService)();\n};\nSignalRService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SignalRService,\n  factory: SignalRService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,OAAO,KAAKA,OAAO,MAAM,iBAAiB;;AAM1C,OAAM,MAAOC,cAAc;EAuBzBC;IAtBO,SAAI,GAAiB,EAAE;IAIvB,oBAAe,GAAG,MAAK;MAC5B,IAAI,CAACC,aAAa,GAAG,IAAIH,OAAO,CAACI,oBAAoB,EAAE,CACpDC,OAAO,CAAC,8BAA8B,CAAC,CACvCC,KAAK,EAAE;MAEV,IAAI,CAACH,aAAa,CACfI,KAAK,EAAE,CACPC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CACpDC,KAAK,CAAEC,GAAG,IAAKH,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC,CAAC;IACxE,CAAC;IAEM,iCAA4B,GAAG,MAAK;MACzC,IAAI,CAACP,aAAa,CAACU,EAAE,CAAC,mBAAmB,EAAGC,IAAI,IAAI;QAClD,IAAI,CAACA,IAAI,GAAGA,IAAI;QAChBL,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEI,IAAI,CAAC;MACtC,CAAC,CAAC;IACJ,CAAC;EAEc;;AAvBJb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAc,SAAdd,cAAc;EAAAe,YAFb;AAAM","names":["signalR","SignalRService","constructor","hubConnection","HubConnectionBuilder","withUrl","build","start","then","console","log","catch","err","on","data","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Keorapetse Fani\\Documents\\projects\\signalR\\ClientApp\\src\\app\\services\\signal-r.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport * as signalR from '@aspnet/signalr';\nimport { ChartModel } from '../_interfaces/chartmodel.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SignalRService {\n  public data: ChartModel[] = [];\n\n  private hubConnection!: signalR.HubConnection;\n\n  public startConnection = () => {\n    this.hubConnection = new signalR.HubConnectionBuilder()\n      .withUrl('https://localhost:5001/chart')\n      .build();\n\n    this.hubConnection\n      .start()\n      .then(() => console.log('Connection established...'))\n      .catch((err) => console.log('Error while starting the connection.'));\n  };\n\n  public addTransferChartDataListener = () => {\n    this.hubConnection.on('transferchartdata', (data) => {\n      this.data = data;\n      console.log('DATA RECEIVED: ', data);\n    });\n  };\n\n  constructor() {}\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}